#! /usr/bin/env node

var fse = require('fs-extra');
var prompt = require('prompt');
var argv = require('yargs').argv;

/**
 * Wrapper for node-fs-exta remove function.
 * https://github.com/jprichardson/node-fs-extra#removedir-callback
 * @param {Object} options - The options object containing the file/folder to remove
 */
function remove(options) {
    console.info('Be gone rapscalian...');

    fse.remove(options.fileFolder, function(err) {
        if (err) {
            return console.error('Error thrown while removing file or directory', err);
        }
    });

    console.info('Directory ' + options.fileFolder + ' gone.');
}

/**
 * Wrapper for node-fs-exta mkdirs function.
 * https://github.com/jprichardson/node-fs-extra#emptydirdir-callback
 * @param {Object} options - The options object containing the folder to empty
 */
function emptyDir(options) {
    console.info('Cleaning directory ' + options.dir + ' ...');

    fse.emptyDir(options.dir, function(err) {
        if (err) {
            return console.error('Error thrown while cleaning directory', err);
        }
    });

    console.info('Directory ' + options.dir + ' is clean as a whistle.');
}

/**
 * Wrapper for node-fs-exta mkdirs function.
 * https://github.com/jprichardson/node-fs-extra#mkdirsdir-callback
 * @param {Object} options - The options object containing the folder to create
 */
function mkdirs(options) {

    console.info('Creating directory ' + options.dir + ' ...');

    fse.mkdirs(options.dir, function(err) {
        if (err) {
            return console.error('Error thrown while creating directory', err);
        }
    });

    console.info('Directory ' + options.dir + ' created');
}

/**
 * Wrapper for node-fs-exta copy function.
 * https://github.com/jprichardson/node-fs-extra#copy
 * Options currently supported are clobber and preserveTimestamps
 * @param {Object} options - The options object. This will consist of the following:
 * {
 *   filesFolders: // comma separated list of files or folders,
 *   destination: // distonation folder, defaults to dist/,
 *   clobber: // true or false,
 *   preserveTimestamps: // true or false,
 * }
 */
function copy(options) {

    console.info('Copying files/folders...');

    // because booleans seems to not play nicely with prompt and yargs :(
    // https://github.com/flatiron/prompt/issues/151
    options.clobber = options.clobber === 'false' ? false : true;
    options.preserveTimestamps = options.preserveTimestamps === 'false' ? false : true;

    // using a generic name, as it can be file(s) or folder(s)
    // convert the string into an Array
    var elementsArray = options.filesFolders.split(',');
    var copyOptions = {
        clobber: options.clobber,
        preserveTimestamps: options.preserveTimestamps
    };
    var output;

    elementsArray.forEach(function(element) {
        output = options.destination + '/' + element;
        fse.copy(element, output, copyOptions, function(err) {
            if (err) {
                return console.error(err);
            }
        });
    });

    console.info('Copy complete...');
}

/**
 * Reads input from the user, using node-prompt. Also allows users to bypass prompts and specify
 * arguments via command line parameters.
 *
 * For exmaple fsys copy --fileFolder media,css --destination dist
 */
function init() {
    var task = argv.task;
    var copySchema = {
        properties: {
            filesFolders: {
                description: 'Please enter the file(s) or folder(s) you wish to copy',
                type: 'string',
                required: true,
                message: 'This field cannot be empty'
            },
            destination: {
                description: 'Please specify destination folder',
                type: 'string',
                default: 'dist'
            },
            clobber: {
                description: 'Do you wish to overwrite existing files or directories?',
                type: 'string',
                default: 'false'
            },
            preserveTimestamps: {
                description: 'Preserve source file/folder(s) timestamps?',
                type: 'string',
                default: 'false'
            }
        }
    };
    var mkdirsSchema = {
        properties: {
            dir: {
                description: 'Please enter the directory, or directory path, you wish to create',
                type: 'string',
                required: true,
                message: 'This field cannot be empty'
            }
        }
    };
    var emptyDirSchema = {
        properties: {
            dir: {
                description: 'Please enter the directory you wish to clean',
                type: 'string',
                required: true,
                message: 'This field cannot be empty'
            }
        }
    };
    var removeSchema = {
        properties: {
            fileFolder: {
                description: 'Please enter the file or directory you wish to remove',
                type: 'string',
                required: true,
                message: 'Seriously? You want to remove nothing... Try again please'
            }
        }
    };

    // allows users to specify options via command line directly,
    // bypassing the prompts
    prompt.override = argv;

    prompt.start();

    switch(task) {
        case 'copy':
            prompt.get(copySchema, function(err, options) {

                if (err) {
                    return console.error('Error thrown by prompt in copy', err);
                }

                copy(options);
            });
            break;
        case 'mkdir':
            prompt.get(mkdirsSchema, function(err, options) {

                if (err) {
                    return console.error('Error thrown by prompt in mkdir', err);
                }

                mkdirs(options);
            });
            break;
        case 'emptyDir':
        prompt.get(emptyDirSchema, function(err, options) {

            if (err) {
                return console.error('Error thrown by prompt in emptyDir', err);
            }

            emptyDir(options);
        });
        break;
        case 'remove':
        prompt.get(removeSchema, function(err, options) {

            if (err) {
                return console.error('Error thrown by prompt in remove', err);
            }

            remove(options);
        });
        break;
        default:
            console.log('Please specify the command you wish to run.');
    };
}

init();
